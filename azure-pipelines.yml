trigger:
- master

pool:
  name: default

variables:
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: '**/*.UnitTests.csproj'
    arguments: '--no-build --configuration $(buildConfiguration)'
    testRunTitle: 'UnitTests $(Build.DefinitionName)_$(Build.BuildNumber)'

- task: BuildQualityChecks@9
  inputs:
    checkCoverage: true
    coverageFailOption: 'fixed'
    coverageType: 'lines'
    coverageThreshold: '60'
    
- task: CopyFiles@2
  inputs:
    Contents: '*.IntegrationTests/bin/Release/net?.0/*.*'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    flattenFolders: false

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'Tests'
    publishLocation: 'Container'

- task: Docker@0
  inputs:
    containerregistrytype: 'Container Registry'
    action: 'Build an image'
    dockerFile: './SSNApi/Dockerfile'
    buildArguments: '--force-rm .'
    defaultContext: false
    imageName: 'registry:5000/$(Build.Repository.Name):$(Build.BuildId)'
    qualifyImageName: false
    includeLatestTag: true
- task: Docker@1
  inputs:
    containerregistrytype: 'Container Registry'
    command: 'Push an image'
    imageName: 'registry:5000/$(Build.Repository.Name):$(Build.BuildId)'
    qualifyImageName: false

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'deploy/ssnapi'
    ArtifactName: 'Artifacts'
    publishLocation: 'Container'
